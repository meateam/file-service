// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package quota

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuotaServiceClient is the client API for QuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaServiceClient interface {
	IsAllowedToGetQuota(ctx context.Context, in *IsAllowedToGetQuotaRequest, opts ...grpc.CallOption) (*IsAllowedToGetQuotaResponse, error)
	GetOwnerQuota(ctx context.Context, in *GetOwnerQuotaRequest, opts ...grpc.CallOption) (*GetOwnerQuotaResponse, error)
	UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*UpdateQuotaResponse, error)
}

type quotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaServiceClient(cc grpc.ClientConnInterface) QuotaServiceClient {
	return &quotaServiceClient{cc}
}

func (c *quotaServiceClient) IsAllowedToGetQuota(ctx context.Context, in *IsAllowedToGetQuotaRequest, opts ...grpc.CallOption) (*IsAllowedToGetQuotaResponse, error) {
	out := new(IsAllowedToGetQuotaResponse)
	err := c.cc.Invoke(ctx, "/quota.QuotaService/IsAllowedToGetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetOwnerQuota(ctx context.Context, in *GetOwnerQuotaRequest, opts ...grpc.CallOption) (*GetOwnerQuotaResponse, error) {
	out := new(GetOwnerQuotaResponse)
	err := c.cc.Invoke(ctx, "/quota.QuotaService/GetOwnerQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) UpdateQuota(ctx context.Context, in *UpdateQuotaRequest, opts ...grpc.CallOption) (*UpdateQuotaResponse, error) {
	out := new(UpdateQuotaResponse)
	err := c.cc.Invoke(ctx, "/quota.QuotaService/UpdateQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaServiceServer is the server API for QuotaService service.
// All implementations must embed UnimplementedQuotaServiceServer
// for forward compatibility
type QuotaServiceServer interface {
	IsAllowedToGetQuota(context.Context, *IsAllowedToGetQuotaRequest) (*IsAllowedToGetQuotaResponse, error)
	GetOwnerQuota(context.Context, *GetOwnerQuotaRequest) (*GetOwnerQuotaResponse, error)
	UpdateQuota(context.Context, *UpdateQuotaRequest) (*UpdateQuotaResponse, error)
	mustEmbedUnimplementedQuotaServiceServer()
}

// UnimplementedQuotaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuotaServiceServer struct {
}

func (UnimplementedQuotaServiceServer) IsAllowedToGetQuota(context.Context, *IsAllowedToGetQuotaRequest) (*IsAllowedToGetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAllowedToGetQuota not implemented")
}
func (UnimplementedQuotaServiceServer) GetOwnerQuota(context.Context, *GetOwnerQuotaRequest) (*GetOwnerQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnerQuota not implemented")
}
func (UnimplementedQuotaServiceServer) UpdateQuota(context.Context, *UpdateQuotaRequest) (*UpdateQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuota not implemented")
}
func (UnimplementedQuotaServiceServer) mustEmbedUnimplementedQuotaServiceServer() {}

// UnsafeQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaServiceServer will
// result in compilation errors.
type UnsafeQuotaServiceServer interface {
	mustEmbedUnimplementedQuotaServiceServer()
}

func RegisterQuotaServiceServer(s grpc.ServiceRegistrar, srv QuotaServiceServer) {
	s.RegisterService(&QuotaService_ServiceDesc, srv)
}

func _QuotaService_IsAllowedToGetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAllowedToGetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).IsAllowedToGetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota.QuotaService/IsAllowedToGetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).IsAllowedToGetQuota(ctx, req.(*IsAllowedToGetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetOwnerQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetOwnerQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota.QuotaService/GetOwnerQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetOwnerQuota(ctx, req.(*GetOwnerQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_UpdateQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).UpdateQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quota.QuotaService/UpdateQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).UpdateQuota(ctx, req.(*UpdateQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaService_ServiceDesc is the grpc.ServiceDesc for QuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quota.QuotaService",
	HandlerType: (*QuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAllowedToGetQuota",
			Handler:    _QuotaService_IsAllowedToGetQuota_Handler,
		},
		{
			MethodName: "GetOwnerQuota",
			Handler:    _QuotaService_GetOwnerQuota_Handler,
		},
		{
			MethodName: "UpdateQuota",
			Handler:    _QuotaService_UpdateQuota_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quota/quota.proto",
}
