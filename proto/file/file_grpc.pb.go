// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
	CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error)
	CreateUpdate(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error)
	UpdateUploadID(ctx context.Context, in *UpdateUploadIDRequest, opts ...grpc.CallOption) (*UpdateUploadIDResponse, error)
	GetUploadByID(ctx context.Context, in *GetUploadByIDRequest, opts ...grpc.CallOption) (*GetUploadByIDResponse, error)
	DeleteUploadByKey(ctx context.Context, in *DeleteUploadByKeyRequest, opts ...grpc.CallOption) (*DeleteUploadByKeyResponse, error)
	DeleteUploadByID(ctx context.Context, in *DeleteUploadByIDRequest, opts ...grpc.CallOption) (*DeleteUploadByIDResponse, error)
	GetFileByID(ctx context.Context, in *GetByFileByIDRequest, opts ...grpc.CallOption) (*File, error)
	GetFileByKey(ctx context.Context, in *GetFileByKeyRequest, opts ...grpc.CallOption) (*File, error)
	GetFilesByFolder(ctx context.Context, in *GetFilesByFolderRequest, opts ...grpc.CallOption) (*GetFilesByFolderResponse, error)
	GetDescendantsByFolder(ctx context.Context, in *GetDescendantsByFolderRequest, opts ...grpc.CallOption) (*GetDescendantsByFolderResponse, error)
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*File, error)
	CreateShortcut(ctx context.Context, in *CreateShortcutRequest, opts ...grpc.CallOption) (*File, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	IsAllowed(ctx context.Context, in *IsAllowedRequest, opts ...grpc.CallOption) (*IsAllowedResponse, error)
	UpdateFiles(ctx context.Context, in *UpdateFilesRequest, opts ...grpc.CallOption) (*UpdateFilesResponse, error)
	GetAncestors(ctx context.Context, in *GetAncestorsRequest, opts ...grpc.CallOption) (*GetAncestorsResponse, error)
	GetDescendantsByID(ctx context.Context, in *GetDescendantsByIDRequest, opts ...grpc.CallOption) (*GetDescendantsByIDResponse, error)
	DeleteFileByID(ctx context.Context, in *DeleteFileByIDRequest, opts ...grpc.CallOption) (*DeleteFileByIDResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) GenerateKey(ctx context.Context, in *GenerateKeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/GenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error) {
	out := new(CreateUploadResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/CreateUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateUpdate(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error) {
	out := new(CreateUploadResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/CreateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UpdateUploadID(ctx context.Context, in *UpdateUploadIDRequest, opts ...grpc.CallOption) (*UpdateUploadIDResponse, error) {
	out := new(UpdateUploadIDResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/UpdateUploadID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetUploadByID(ctx context.Context, in *GetUploadByIDRequest, opts ...grpc.CallOption) (*GetUploadByIDResponse, error) {
	out := new(GetUploadByIDResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/GetUploadByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteUploadByKey(ctx context.Context, in *DeleteUploadByKeyRequest, opts ...grpc.CallOption) (*DeleteUploadByKeyResponse, error) {
	out := new(DeleteUploadByKeyResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/DeleteUploadByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteUploadByID(ctx context.Context, in *DeleteUploadByIDRequest, opts ...grpc.CallOption) (*DeleteUploadByIDResponse, error) {
	out := new(DeleteUploadByIDResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/DeleteUploadByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileByID(ctx context.Context, in *GetByFileByIDRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.FileService/GetFileByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFileByKey(ctx context.Context, in *GetFileByKeyRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.FileService/GetFileByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetFilesByFolder(ctx context.Context, in *GetFilesByFolderRequest, opts ...grpc.CallOption) (*GetFilesByFolderResponse, error) {
	out := new(GetFilesByFolderResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/GetFilesByFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetDescendantsByFolder(ctx context.Context, in *GetDescendantsByFolderRequest, opts ...grpc.CallOption) (*GetDescendantsByFolderResponse, error) {
	out := new(GetDescendantsByFolderResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/GetDescendantsByFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.FileService/CreateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateShortcut(ctx context.Context, in *CreateShortcutRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/file.FileService/CreateShortcut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) IsAllowed(ctx context.Context, in *IsAllowedRequest, opts ...grpc.CallOption) (*IsAllowedResponse, error) {
	out := new(IsAllowedResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/IsAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) UpdateFiles(ctx context.Context, in *UpdateFilesRequest, opts ...grpc.CallOption) (*UpdateFilesResponse, error) {
	out := new(UpdateFilesResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/UpdateFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetAncestors(ctx context.Context, in *GetAncestorsRequest, opts ...grpc.CallOption) (*GetAncestorsResponse, error) {
	out := new(GetAncestorsResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/GetAncestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetDescendantsByID(ctx context.Context, in *GetDescendantsByIDRequest, opts ...grpc.CallOption) (*GetDescendantsByIDResponse, error) {
	out := new(GetDescendantsByIDResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/GetDescendantsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFileByID(ctx context.Context, in *DeleteFileByIDRequest, opts ...grpc.CallOption) (*DeleteFileByIDResponse, error) {
	out := new(DeleteFileByIDResponse)
	err := c.cc.Invoke(ctx, "/file.FileService/DeleteFileByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	GenerateKey(context.Context, *GenerateKeyRequest) (*KeyResponse, error)
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error)
	CreateUpdate(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error)
	UpdateUploadID(context.Context, *UpdateUploadIDRequest) (*UpdateUploadIDResponse, error)
	GetUploadByID(context.Context, *GetUploadByIDRequest) (*GetUploadByIDResponse, error)
	DeleteUploadByKey(context.Context, *DeleteUploadByKeyRequest) (*DeleteUploadByKeyResponse, error)
	DeleteUploadByID(context.Context, *DeleteUploadByIDRequest) (*DeleteUploadByIDResponse, error)
	GetFileByID(context.Context, *GetByFileByIDRequest) (*File, error)
	GetFileByKey(context.Context, *GetFileByKeyRequest) (*File, error)
	GetFilesByFolder(context.Context, *GetFilesByFolderRequest) (*GetFilesByFolderResponse, error)
	GetDescendantsByFolder(context.Context, *GetDescendantsByFolderRequest) (*GetDescendantsByFolderResponse, error)
	CreateFile(context.Context, *CreateFileRequest) (*File, error)
	CreateShortcut(context.Context, *CreateShortcutRequest) (*File, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	IsAllowed(context.Context, *IsAllowedRequest) (*IsAllowedResponse, error)
	UpdateFiles(context.Context, *UpdateFilesRequest) (*UpdateFilesResponse, error)
	GetAncestors(context.Context, *GetAncestorsRequest) (*GetAncestorsResponse, error)
	GetDescendantsByID(context.Context, *GetDescendantsByIDRequest) (*GetDescendantsByIDResponse, error)
	DeleteFileByID(context.Context, *DeleteFileByIDRequest) (*DeleteFileByIDResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) GenerateKey(context.Context, *GenerateKeyRequest) (*KeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (UnimplementedFileServiceServer) CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpload not implemented")
}
func (UnimplementedFileServiceServer) CreateUpdate(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdate not implemented")
}
func (UnimplementedFileServiceServer) UpdateUploadID(context.Context, *UpdateUploadIDRequest) (*UpdateUploadIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUploadID not implemented")
}
func (UnimplementedFileServiceServer) GetUploadByID(context.Context, *GetUploadByIDRequest) (*GetUploadByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadByID not implemented")
}
func (UnimplementedFileServiceServer) DeleteUploadByKey(context.Context, *DeleteUploadByKeyRequest) (*DeleteUploadByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUploadByKey not implemented")
}
func (UnimplementedFileServiceServer) DeleteUploadByID(context.Context, *DeleteUploadByIDRequest) (*DeleteUploadByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUploadByID not implemented")
}
func (UnimplementedFileServiceServer) GetFileByID(context.Context, *GetByFileByIDRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByID not implemented")
}
func (UnimplementedFileServiceServer) GetFileByKey(context.Context, *GetFileByKeyRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByKey not implemented")
}
func (UnimplementedFileServiceServer) GetFilesByFolder(context.Context, *GetFilesByFolderRequest) (*GetFilesByFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilesByFolder not implemented")
}
func (UnimplementedFileServiceServer) GetDescendantsByFolder(context.Context, *GetDescendantsByFolderRequest) (*GetDescendantsByFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescendantsByFolder not implemented")
}
func (UnimplementedFileServiceServer) CreateFile(context.Context, *CreateFileRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedFileServiceServer) CreateShortcut(context.Context, *CreateShortcutRequest) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortcut not implemented")
}
func (UnimplementedFileServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServiceServer) IsAllowed(context.Context, *IsAllowedRequest) (*IsAllowedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAllowed not implemented")
}
func (UnimplementedFileServiceServer) UpdateFiles(context.Context, *UpdateFilesRequest) (*UpdateFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFiles not implemented")
}
func (UnimplementedFileServiceServer) GetAncestors(context.Context, *GetAncestorsRequest) (*GetAncestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncestors not implemented")
}
func (UnimplementedFileServiceServer) GetDescendantsByID(context.Context, *GetDescendantsByIDRequest) (*GetDescendantsByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescendantsByID not implemented")
}
func (UnimplementedFileServiceServer) DeleteFileByID(context.Context, *DeleteFileByIDRequest) (*DeleteFileByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileByID not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GenerateKey(ctx, req.(*GenerateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/CreateUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateUpload(ctx, req.(*CreateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/CreateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateUpdate(ctx, req.(*CreateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UpdateUploadID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUploadIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UpdateUploadID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/UpdateUploadID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UpdateUploadID(ctx, req.(*UpdateUploadIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetUploadByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetUploadByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GetUploadByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetUploadByID(ctx, req.(*GetUploadByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteUploadByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUploadByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteUploadByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/DeleteUploadByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteUploadByKey(ctx, req.(*DeleteUploadByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteUploadByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUploadByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteUploadByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/DeleteUploadByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteUploadByID(ctx, req.(*DeleteUploadByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByFileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GetFileByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileByID(ctx, req.(*GetByFileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFileByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFileByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GetFileByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFileByKey(ctx, req.(*GetFileByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetFilesByFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilesByFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetFilesByFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GetFilesByFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetFilesByFolder(ctx, req.(*GetFilesByFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetDescendantsByFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescendantsByFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetDescendantsByFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GetDescendantsByFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetDescendantsByFolder(ctx, req.(*GetDescendantsByFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateShortcut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortcutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateShortcut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/CreateShortcut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateShortcut(ctx, req.(*CreateShortcutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_IsAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).IsAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/IsAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).IsAllowed(ctx, req.(*IsAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_UpdateFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).UpdateFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/UpdateFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).UpdateFiles(ctx, req.(*UpdateFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetAncestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAncestorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetAncestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GetAncestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetAncestors(ctx, req.(*GetAncestorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetDescendantsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescendantsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetDescendantsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/GetDescendantsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetDescendantsByID(ctx, req.(*GetDescendantsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFileByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFileByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file.FileService/DeleteFileByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFileByID(ctx, req.(*DeleteFileByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _FileService_GenerateKey_Handler,
		},
		{
			MethodName: "CreateUpload",
			Handler:    _FileService_CreateUpload_Handler,
		},
		{
			MethodName: "CreateUpdate",
			Handler:    _FileService_CreateUpdate_Handler,
		},
		{
			MethodName: "UpdateUploadID",
			Handler:    _FileService_UpdateUploadID_Handler,
		},
		{
			MethodName: "GetUploadByID",
			Handler:    _FileService_GetUploadByID_Handler,
		},
		{
			MethodName: "DeleteUploadByKey",
			Handler:    _FileService_DeleteUploadByKey_Handler,
		},
		{
			MethodName: "DeleteUploadByID",
			Handler:    _FileService_DeleteUploadByID_Handler,
		},
		{
			MethodName: "GetFileByID",
			Handler:    _FileService_GetFileByID_Handler,
		},
		{
			MethodName: "GetFileByKey",
			Handler:    _FileService_GetFileByKey_Handler,
		},
		{
			MethodName: "GetFilesByFolder",
			Handler:    _FileService_GetFilesByFolder_Handler,
		},
		{
			MethodName: "GetDescendantsByFolder",
			Handler:    _FileService_GetDescendantsByFolder_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _FileService_CreateFile_Handler,
		},
		{
			MethodName: "CreateShortcut",
			Handler:    _FileService_CreateShortcut_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileService_DeleteFile_Handler,
		},
		{
			MethodName: "IsAllowed",
			Handler:    _FileService_IsAllowed_Handler,
		},
		{
			MethodName: "UpdateFiles",
			Handler:    _FileService_UpdateFiles_Handler,
		},
		{
			MethodName: "GetAncestors",
			Handler:    _FileService_GetAncestors_Handler,
		},
		{
			MethodName: "GetDescendantsByID",
			Handler:    _FileService_GetDescendantsByID_Handler,
		},
		{
			MethodName: "DeleteFileByID",
			Handler:    _FileService_DeleteFileByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/file.proto",
}
